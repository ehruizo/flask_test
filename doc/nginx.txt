## Despliegue de la API en un servidor nginx

1. Instalar nginx


2. Instalar dependencias

su
pip3 install numpy scipy scikit-learn pandas flask flask-sqlalchemy flask-restful uwsgi --no-cache-dir


3. Crear la base de datos, el esquema y la tabla con datos para el conversor (ver table.sql)


4. Crear wsgi.py en la raíz de la API, con este contenido:

from api import app

if __name__ == "__main__":
    app.run()


4 (b). Asignar permisos de lectura

chmod +r wsgi.py


5. Comprobar que wsgi puede correr la API (revisar http://localhost:8000)

uwsgi --socket 0.0.0.0:8000 --protocol=http --file wsgi.py --callable app


6. Crear archivo de inicialización api.ini:

[uwsgi]
module = wsgi
callable = app
master = true
processes = 2
socket = api.sock
chmod-socket = 666
vacuum = true


7. Aunque hay otras formas de hacerlo, acá vamos a crear un daemon para el proceso uwsgi que servirá las peticiones:

sudo gedit /usr/lib/systemd/system/api1.service

[Unit]
Description=API de prueba con Flask y uWSGI
After=network.target

[Service]
User=max
WorkingDirectory=/var/www/api1
ExecStart=/usr/local/bin/uwsgi --ini api.ini
KillSignal=SIGQUIT

[Install]
WantedBy=multi-user.target


8. Iniciar el daemon y verificar que no tenga errores:

sudo systemctl start api1
sudo systemctl status -l api1


9. Configurar nginx:

sudo gedit /etc/nginx/conf.d/default.conf

9 (a). Para poner la API en la raíz: comentar el bloque "location /" y reemplazarlo por este:

location / {
	include uwsgi_params;
	uwsgi_pass unix:/var/www/api1/api.sock;
}

9 (b). Para poner la API en la URL /api: prefijar los recursos en api.py con /api y agregar este código dentro del bloque server:

location /api {
	include uwsgi_params;
	uwsgi_pass unix:/var/www/api1/api.sock;
}


10. Chequear configuraciones y reiniciar nginx

sudo nginx -t
sudo systemctl restart nginx


11. Deshabilitar SELinux o buscar una forma de que nginx pueda escribir en el archivo api.sock

sudo setenforce 0
